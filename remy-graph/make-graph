#!/usr/bin/perl -w

use strict;

die "Usage: $0 FILENAME_BASE" unless (scalar @ARGV == 1);

my $filename_base = shift @ARGV;

print STDERR "Writing to $filename_base.N.svg...\n";

sub transformx {
  my ( $x ) = @_;

  $x *= 50;

  $x = 1024 if $x > 1024;

  $x = 1024 * ($x ** 0.5) / (1024 ** 0.5);

  return $x
}

sub transformy {
  my ( $y ) = @_;

  $y *= 50;

  $y = 768 if $y > 768;

  $y = 768 * ($y ** 0.5) / (768 ** 0.5);

  return $y;
}

sub parse_memory {
  my ( $memory ) = @_;

  my ( $sewma, $rewma ) = $memory =~ m{sewma=([0-9.-]+), rewma=([0-9.-]+)};

  return ( $sewma, $rewma );
}

sub parse_whisker {
  my ( $whisker ) = @_;

  my ( $lo_memory ) = $whisker =~ m{lo=<(.*?)>};
  my ( $hi_memory ) = $whisker =~ m{hi=<(.*?)>};

  my ( $lo_sewma, $lo_rewma ) = parse_memory( $lo_memory );
  my ( $hi_sewma, $hi_rewma ) = parse_memory( $hi_memory );

  my ( $usage ) = $whisker =~ m{usage=(.*?) };
  $usage = 1.0 if $usage =~ m{nan};

  my ( $incr )  = $whisker =~ m{win=([0-9.-]+)};
  my ( $mul )   = $whisker =~ m{([0-9.-]+) \* win};
  my ( $r )     = $whisker =~ m{intersend=([0-9.-]+)};

  return ( $lo_sewma, $lo_rewma, $hi_sewma, $hi_rewma, $usage, $incr, $mul, $r );
}

sub transformu {
  my ( $usage ) = @_;

  return 1 - (1 - $usage) ** 10;
}

sub min {
  my $min = 1000000000;

  for ( @_ ) { $min = $_ if ( $_ < $min ) }

  return $min;
}

my %whisker_cache;

my $num = 0;

my $hit_first = 0;

LINE: while ( <> ) {
  next unless m{^Whiskers};

  if ( $hit_first ) {
    next unless m{split};
  } else {
    $hit_first = 1;
  }

  if ( m{split} ) {
    $hit_first = 0;
  }

  my $filename = $filename_base . $num . q{.svg};

  open TARGET, ">$filename" or die "$!";

  print TARGET q{<svg xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" height="768" width="1024" version="1.1">};

  my ( @whiskers ) = m{\[(.*?)\]}g;

  my $num_whiskers = scalar @whiskers;

  print STDERR "Writing $num_whiskers whiskers to $filename... ";

  my $boxes = "";
  my $text = "";

  my $topboxes = "";
  my $toptext = "";

  for ( @whiskers ) {
    my ( $lo_sewma, $lo_rewma, $hi_sewma, $hi_rewma, $usage, $incr, $mul, $r ) = parse_whisker( $_ );

    my $new_whisker = 0;

    my $wstr = "$lo_sewma $lo_rewma $hi_sewma $hi_rewma";
    if ( not exists $whisker_cache{ $wstr } ) {
      $new_whisker = 1;
      $whisker_cache{ $wstr } = 1;
    }

    my $left_edge = transformx( $lo_sewma );
    my $right_edge = transformx( $hi_sewma );

    my $top_edge = transformy( $lo_rewma );
    my $bottom_edge = transformy( $hi_rewma );

    my $height = $bottom_edge - $top_edge;
    my $width = $right_edge - $left_edge;

    $usage = transformu( $usage );

    my $colorval = int( 255 - 255 * $usage );
    $colorval = 0 if $colorval < 0;
    $colorval = 255 if $colorval > 255;

    my ( $red, $green, $blue ) = ( 255, $colorval, $colorval );

    my $edge_color = "rgb(0,0,0)";

    my ( $boxvar, $textvar ) = ( \$boxes, \$text );

    my $dasharray = "none";

    my $stroke_width = 5;

    if ( $new_whisker ) {
      ( $red, $green, $blue ) = ( 64, 64, 192 );
      $edge_color = "rgb(255,255,255)";
      $boxvar = \$topboxes;
      $textvar = \$toptext;
      $stroke_width = "5";
    }

    $r = sprintf "%.1f", $r;
    $mul = sprintf "%.2f", $mul;

    my $fs = $width / 8;

    $fs = $height if ( $fs > $height );

    my $texty = $height / 2 + $fs / 4;
    my $textx = $width / 2;

    $texty = 10000 if ( $texty >= 1000 );
    $textx = 10000 if ( $textx >= 750 );

#    print STDERR "graphing from x [$left_edge <=> $right_edge] y [$bottom_edge <=> $top_edge]\n";

    ${$boxvar} .= qq{<g transform="translate($left_edge,$top_edge)"><rect stroke-linejoin="round" stroke-dashoffset="0" height="$height" width="$width" stroke="$edge_color" stroke-linecap="butt" stroke-dasharray="$dasharray" x="0" y="0" stroke-miterlimit="4" stroke-width="$stroke_width" fill="rgb($red,$green,$blue)"/></g>};

    ${$textvar} .= qq{<g transform="translate($left_edge,$top_edge)"><text style="letter-spacing:0px;word-spacing:0px;" font-family="FreeSans" xml:space="preserve" font-size="${fs}px" font-style="normal" font-stretch="normal" font-variant="normal" font-weight="normal" line-height="125%" fill="#000000"><tspan y="$texty" x="$textx" style="text-anchor:middle;text-align:center;">&lt;$mul,$incr,$r&gt;</tspan></text></g>};
  }

  print TARGET $boxes . $topboxes . $text . $toptext;

  print TARGET q{</svg>};

  print STDERR "done.\n";

  close TARGET or die "$!";

  $num++;
}
